<% if (crud || relations.length > 0) { %>import type { Prisma } from '@prisma/client'<% } %>
<% if (relations.length) { %>import type { ResolverArgs } from '@redwoodjs/graphql-server'<% } %>

import { db } from 'src/lib/db'
import { UserInputError } from '@redwoodjs/graphql-server'
import {
  executeBeforeCreateRules,
  executeAfterCreateRules,
  executeBeforeReadAllRules,
  executeAfterReadAllRules,
  executeBeforeReadRules,
  executeAfterReadRules,
  executeBeforeUpdateRules,
  executeAfterUpdateRules,
  executeBeforeDeleteRules,
  executeAfterDeleteRules,
} from 'src/lib/rules'

let table = '${singularCamelName}'

<% if (crud) { %>

interface Create${singularPascalName}Args {
  input: Prisma.${singularPascalName}CreateInput
}

export const create${singularPascalName} = async ({ input }: Create${singularPascalName}Args) => {
  try {
    let result = await executeBeforeCreateRules(table, {
      input,
      status: { code: 'success', message: '' },
    })
    if (result.status.code !== 'success') {
      throw new UserInputError(result.status.message)
    }
    let record = await db[table].create({
      data: result.input,
    })
    let afterResult = await executeAfterCreateRules(table, {
      record,
    })
    return afterResult.record
  } catch (error) {
    throw new UserInputError(error.message)
  }
}

export const ${pluralCamelName} = async () => {
  try {
    let result = await executeBeforeReadAllRules(table, {
      status: { code: 'success', message: '' },
    })
    if (result.status.code !== 'success') {
      throw new UserInputError(result.status.message)
    }
    let readRecords = await db[table].findMany({})
    readRecords = executeAfterReadAllRules(table, readRecords)
    return readRecords
  } catch (error) {
    throw new UserInputError(error.message)
  }
}

export const ${singularCamelName} = async ({ id }: Prisma.${singularPascalName}WhereUniqueInput) => {
  try {
    let result = await executeBeforeReadRules(table, {
      id,
      status: { code: 'success', message: '' },
    })
    if (result.status.code !== 'success') {
      throw new UserInputError(result.status.message)
    }
    let readRecord = await db[table].findUnique({
      where: { id },
    })
    readRecord = executeAfterReadRules(table, readRecord)
    return readRecord
  } catch (error) {
    throw new UserInputError(error.message)
  }
}

interface Update${singularPascalName}Args extends Prisma.${singularPascalName}WhereUniqueInput {
  input: Prisma.${singularPascalName}UpdateInput
}

export const update${singularPascalName} = async ({ id, input }: Update${singularPascalName}Args) => {
  try {
    let result = await executeBeforeUpdateRules(table, {
      id,
      input,
      status: { code: 'success', message: '' },
    })
    if (result.status.code !== 'success') {
      throw new UserInputError(result.status.message)
    }
    let updatedRecord = await db[table].update({
      data: result.input,
      where: { id },
    })
    updatedRecord = executeAfterUpdateRules(table, updatedRecord)
    return updatedRecord
  } catch (error) {
    throw new UserInputError(error.message)
  }
}

export const delete${singularPascalName} = async ({ id }: Prisma.${singularPascalName}WhereUniqueInput) => {
  try {
    let result = await executeBeforeDeleteRules(table, {
      id,
      status: { code: 'success', message: '' },
    })
    if (result.status.code !== 'success') {
      throw new UserInputError(result.status.message)
    }
    let deletedRecord = await db[table].delete({
      where: { id },
    })
    deletedRecord = executeAfterDeleteRules(table, deletedRecord)
    return deletedRecord
  } catch (error) {
    throw new UserInputError(error.message)
  }
}<% } %>

<% if (!crud) {%>


export const ${pluralCamelName} = async () => {
  try {
    let result = await executeBeforeReadAllRules(table, {
      status: { code: 'success', message: '' },
    })
    if (result.status.code !== 'success') {
      throw new UserInputError(result.status.message)
    }
    let readRecords = await db[table].findMany({})
    readRecords = executeAfterReadAllRules(table, readRecords)
    return readRecords
  } catch (error) {
    throw new UserInputError(error.message)
  }
}

export const ${singularCamelName} = async ({ id }: Prisma.${singularPascalName}WhereUniqueInput) => {
  try {
    let result = await executeBeforeReadRules(table, {
      id,
      status: { code: 'success', message: '' },
    })
    if (result.status.code !== 'success') {
      throw new UserInputError(result.status.message)
    }
    let readRecord = await db[table].findUnique({
      where: { id },
    })
    readRecord = executeAfterReadRules(table, readRecord)
    return readRecord
  } catch (error) {
    throw new UserInputError(error.message)
  }
}

<% } %>

<% if (relations.length) { %>

export const ${singularPascalName} = {<% relations.forEach(relation => { %>
  ${relation}: (_obj, { root }: ResolverArgs<ReturnType<typeof ${singularCamelName}>>) => db[table].findUnique({ where: { id: root.id } }).${relation}(),<% }) %>
}<% } %>
