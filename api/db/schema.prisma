generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  // we default this to sqlite so you can try this before you
  // plugin in a database.. your choices for databse providers
  // are the following
  // PostgreSQL
  // provider = "postgresql"
  // MySQL
  // provider = "mysql"
  // SQLite // probably only for testing
  // provider = "sqlite"
  // url      = "file:./dev.db"
  // MongoDB
  // provider = "mongodb"
  // Microsoft SQL Server

  provider = "postgresql"
  url      = env("DATABASE_URL")

}

model User {
  id                  Int           @id @default(autoincrement())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  email               String        @unique
  name                String        @default("")
  hashedPassword      String        @default("")
  salt                String        @default("")
  resetToken          String?
  resetTokenExpiresAt DateTime?
  GroupMember         GroupMember[] @relation("UserGroupMember")
  Preference          Preference[]  @relation("UserPreference")
}

model Preference {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  entity    String
  value     String?
  userId    Int
  user      User     @relation("UserPreference", fields: [userId], references: [id], onDelete: Cascade)
}

model Group {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String
  description String
  GroupMember GroupMember[]
  GroupRole   GroupRole[]
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  groupId   Int
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User     @relation("UserGroupMember", fields: [userId], references: [id], onDelete: Cascade)
}

model GroupRole {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String
  groupId   Int
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
}
