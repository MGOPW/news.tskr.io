generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  // we default this to sqlite so you can try this before you
  // plugin in a database.. your choices for databse providers
  // are the following
  // PostgreSQL
  // provider = "postgresql"
  // MySQL
  // provider = "mysql"
  // SQLite // probably only for testing
  // provider = "sqlite"
  // url      = "file:./dev.db"
  // MongoDB
  // provider = "mongodb"
  // Microsoft SQL Server

  provider = "postgresql"
  url      = env("DATABASE_URL")
  //url      = env("TEST_DATABASE_URL")

}

model Property {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  entity    String   @unique
  type      String   @default("string")
  value     String?
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  language  String
  entity    String
  value     String

  @@unique([entity, language])
}

model User {
  id                  Int           @id @default(autoincrement())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  name                String        @default("")
  username            String        @unique @default("") // will have username OR subject keep masked
  verifiedAt          DateTime? //               // used to verify account for password reset purposes and for actual access
  // as anyone with auth0 can say I have access to any domain
  email               String?       @default("") // not needed for accounts.. but is needed for communications
  hashedPassword      String?       @default("") //      // used for dbAuth
  salt                String?       @default("") //      // used for dbAuth
  resetToken          String? //                         // used for dbAuth
  resetTokenExpiresAt DateTime? //                       // used for dbAuth
  GroupMember         GroupMember[] @relation("UserGroupMember")
  Preference          Preference[]  @relation("UserPreference")
}

model Preference {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  entity    String
  value     String?
  userId    Int
  user      User     @relation("UserPreference", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([entity, userId])
}

model Group {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String        @unique
  description String
  GroupMember GroupMember[]
  GroupRole   GroupRole[]
  Feed        Feed[]
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  groupId   Int
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User     @relation("UserGroupMember", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model GroupRole {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String
  groupId   Int
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, role])
}

model Log {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  context   Json
  message   String
  source    String
}

model FeedItem {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  title               String                @default("Undefined")
  url                 String                @unique
  active              Boolean               @default(true)
  FeedItemParticipant FeedItemParticipant[]
  feedId              Int
  feed                Feed                  @relation(fields: [feedId], references: [id], onDelete: Cascade)
}

model Feed {
  id                  Int           @id @default(autoincrement())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  active              Boolean       @default(true)
  rssUrl              String?
  title               String
  description         String
  imageUrl            String?
  feedIcon            String        @default("")
  defaultParticipants Participant[]
  groupId             Int
  group               Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  FeedItem            FeedItem[]
}

model Participant {
  id                     Int                   @id @default(autoincrement())
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  active                 Boolean               @default(true)
  name                   String?
  role                   String                @default("participant")
  FeedItemParticipant    FeedItemParticipant[]
  defaultFeedParticipant Feed[]
}

model FeedItemParticipant {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  feedItemId    Int
  feedItem      FeedItem    @relation(fields: [feedItemId], references: [id], onDelete: Cascade)
  participantId Int
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
}
