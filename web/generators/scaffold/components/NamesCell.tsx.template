import { navigate, routes, useLocation } from '@redwoodjs/router'
import { Fragment, useState } from 'react'
import {
  SimpleGrid,
  Flex,
  Table,
  TableCaption,
  Heading,
  Text,
  Box,
  Spacer,
  Button,
} from '@chakra-ui/react'
import TableColumns from 'src/components/TableColumns'
import TableQuery from 'src/components/TableQuery'
import TablePagination from 'src/components/TablePagination'
import TableRows from 'src/components/TableRows/TableRows'
import { DELETE_${singularConstantName}_MUTATION } from 'src/components/${singularPascalName}/Edit${singularPascalName}Cell'
import { MdAdd, MdKeyboardBackspace } from 'react-icons/md'

export const beforeQuery = (props) => {
  // eslint-disable-next-line react-hooks/rules-of-hooks
  const { search } = useLocation()
  let params = new URLSearchParams(search)
  return {
    variables: {
      q: params.get('q'),
      filter: params.get('filter') || props.fuzzyQuery,
      skip: params.get('skip') || props.skip || 0,
      take: params.get('take') || props.take || 10,
      orderBy: params.get('orderBy') || props.orderBy,
    },
    fetchPolicy: 'no-cache',
  }
}
// Looks like you have some foreign keys
// ${JSON.stringify(intForeignKeys,'','')} you may want to update the query
// below to include the related values
export const QUERY = gql`
  query Find${pluralPascalName}(
    $filter: String
    $skip: Int
    $take: Int
    $q: String
    $orderBy: OrderByInput
  ) {
    ${pluralCamelName}(filter: $filter, skip: $skip, take: $take, q: $q, orderBy: $orderBy) {
    count
      take
      skip
      q
      results {
    <% columns.forEach(column => { %>
      <%= column.name %><% }) %>
      }
    }
  }
`

export const Loading = () => <div>Loading...</div>

export const Failure = ({ error }: CellFailureProps) => (
  <div className="rw-cell-error">{error.${singularCamelName}}</div>
)

export const Success = ({
  ${pluralCamelName},
  fuzzyQuery,
  setFuzzyQuery,
  query,
  setQuery,
  columns,
  initialColumns,
  setColumns,
  orderBy,
  setOrderBy,
  skip,
  setSkip,
  take,
  setTake,
  displayColumn,
  roles,
  }: CellSuccessProps<Find${pluralPascalName}>) => {
    let [data, setData] = useState(${pluralCamelName})
  return <Fragment>
    <Heading>${pluralPascalName} ({data.count})</Heading>
     <Flex>
        <Box>
          {${pluralCamelName}.q !== null && (
            <Button
              leftIcon={<MdKeyboardBackspace />}
              colorScheme="teal"
              variant="solid"
              onClick={() => {
                setQuery('')
                setFuzzyQuery('')
                navigate(routes.${pluralCamelName}({}))
              }}
            >
              All ${pluralCamelName}
            </Button>
          )}
        </Box>
        <Spacer />
        <Button
          leftIcon={<MdAdd />}
          colorScheme="teal"
          variant="solid"
          onClick={() => {
            navigate(routes.${newRouteName}())
          }}
        >
          New ${singularCamelName}
        </Button>
      </Flex>
      <TableQuery
        query={query}
        setQuery={setQuery}
        fuzzyQuery={fuzzyQuery}
        setFuzzyQuery={setFuzzyQuery}
        rawQuery={${pluralCamelName}.q}
        inputPlaceholder="Search"
        link={(query) => {
          return routes.${pluralRouteName}({ q: query })
        }}
        setSkip={setSkip}
      />
      <Table variant="striped" colorScheme={'green'} size="xs">
        <TableCaption>List of ${pluralPascalName}</TableCaption>

        <TableColumns
          columns={columns}
          orderBy={orderBy}
          setOrderBy={setOrderBy}
          setColumns={setColumns}
          initialColumns={initialColumns}
          setTake={setTake}
        />
        <TableRows
          columns={columns}
          roles={roles}
          setData={setData}
          data={data}
          model="${pluralCamelName}"
          deleteMutation={DELETE_${singularConstantName}_MUTATION}
          displayColumn={displayColumn}
        />
      </Table>
      <SimpleGrid columns={2} spacingX="40px" spacingY="20px">
        <Flex padding="10px"></Flex>
        <Flex padding="10px">
          <TablePagination skip={skip} setSkip={setSkip} take={take} />
        </Flex>
      </SimpleGrid>
  </Fragment>
}
